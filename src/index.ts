#!/usr/bin/env ts-node

import chalk from 'chalk';
import inquirer from 'inquirer';
import os from 'os';
import path from 'path';
import fs from 'fs';
import { execSync } from 'child_process';
import ora from 'ora';
import { encode, decode } from 'gpt-tokenizer';

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  console.log(
    chalk.redBright('\nüö® Erro: A vari√°vel de ambiente ') +
    chalk.yellow('OPENAI_API_KEY') +
    chalk.redBright(' n√£o est√° definida.\n')
  );
  console.log(
    chalk.white('‚Üí Defina sua chave com: ') + 
    chalk.cyan('export OPENAI_API_KEY="sua-chave"') +
    chalk.white(' ou configure no seu ') +
    chalk.cyan('.bashrc') +
    chalk.white(' ou ') +
    chalk.cyan('.zshrc\n')
  );
  process.exit(1);
}

/**
 * Realiza a chamada √† API do OpenAI.
 * @param prompt Texto que ser√° enviado como mensagem do usu√°rio.
 * @param mode Define o contexto: 'commit' para gerar mensagem de commit ou outro valor para resumo.
 * @returns Resposta da API (string com a mensagem ou o resumo).
 */
export async function callOpenAI(prompt: string, mode: string = 'commit'): Promise<string> {
  const url = 'https://api.openai.com/v1/chat/completions';

  // Escolhe o prompt inicial de acordo com o modo.
  const systemPrompt =
    mode === 'commit'
      ? "Voc√™ √© um assistente que gera mensagens de commit seguindo a conven√ß√£o do Conventional Commits."
      : "Voc√™ √© um assistente que resume altera√ß√µes de c√≥digo de forma breve, usando linguagem imperativa em portugu√™s.";

  const body = {
    model: "gpt-4-turbo",
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: prompt }
    ],
    temperature: 0.2
  };

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${OPENAI_API_KEY}`
    },
    body: JSON.stringify(body)
  });

  if (!response.ok) {
    throw new Error(`Erro na API OpenAI: ${response.statusText}`);
  }

  const data = await response.json();
  // Retorna a resposta do primeiro "choice".
  return data.choices[0].message.content.trim();
}

/**
 * Divide o diff em chunks menores com base na contagem de tokens.
 * Utiliza o gpt-tokenizer para garantir que cada chunk n√£o exceda o limite de tokens.
 * @param diff O diff completo em formato de string.
 * @param maxTokens Quantidade m√°xima de tokens permitida para cada chunk (padr√£o: 1000 tokens).
 * @returns Array de strings, cada uma representando um chunk.
 */
export function chunkDiff(diff: string, maxTokens: number = 1000): string[] {
  // Codifica o diff para obter o array de tokens.
  const tokens = encode(diff);

  // Se o diff couber em um √∫nico chunk, retorna-o diretamente.
  if (tokens.length <= maxTokens) {
    return [diff];
  }

  const chunks: string[] = [];

  // Percorre os tokens de forma que cada chunk contenha no m√°ximo maxTokens tokens.
  for (let i = 0; i < tokens.length; i += maxTokens) {
    const chunkTokens = tokens.slice(i, i + maxTokens);
    const chunkText = decode(chunkTokens);
    chunks.push(chunkText);
  }

  return chunks;
}


// Pr√©-prompt para a gera√ß√£o da mensagem de commit conforme as conven√ß√µes
const COMMIT_PROMPT = `
Por favor, escreva a mensagem de commit para este diff usando a conven√ß√£o de Conventional Commits: https://www.conventionalcommits.org/en/v1.0.0/.
A mensagem deve come√ßar com um tipo de commit, como:
  feat: para novas funcionalidades
  fix: para corre√ß√µes de bugs
  chore: para altera√ß√µes que n√£o afetam a funcionalidade
  docs: para mudan√ßas na documenta√ß√£o
  style: para altera√ß√µes no estilo do c√≥digo (como formata√ß√£o)
  refactor: para altera√ß√µes no c√≥digo que n√£o alteram a funcionalidade
  perf: para melhorias de desempenho
  test: para altera√ß√µes nos testes
  ci: para mudan√ßas no pipeline de integra√ß√£o cont√≠nua

Exemplo:
  feat(auth): adicionar suporte ao login com Google

Caso o commit seja uma altera√ß√£o significativa (breaking change), inclua um t√≠tulo com \`!\` ap√≥s o tipo de commit e adicione a explica√ß√£o em \`BREAKING CHANGE\`:
  feat!(auth): reestruturar fluxo de login
  BREAKING CHANGE: A API de login foi alterada e n√£o √© compat√≠vel com vers√µes anteriores.

Gere tamb√©m uma descri√ß√£o mais detalhada do commit, se necess√°rio.

Use sempre linguagem imperativa e primeira pessoa do singular, como:
  - "adiciona recurso"
  - "corrige bug"
  - "remove arquivo"

Lembre-se: os textos fora do Conventional Commit devem ser em portugu√™s.
`;

async function main(): Promise<void> {
  // Verifica se o diret√≥rio √© um reposit√≥rio git.
  try {
    execSync('git rev-parse --is-inside-work-tree', { stdio: 'ignore' });
  } catch {
    console.error(chalk.red('‚ùå Este diret√≥rio n√£o √© um reposit√≥rio git.'));
    process.exit(1);
  }

  // Verifica se h√° altera√ß√µes staged, desconsiderando arquivos .lock
  let stagedFiles: string;
  try {
    stagedFiles = execSync(
      'git diff --cached --name-only -- . ":(exclude)*.lock"',
      { encoding: 'utf8' }
    ).toString().trim();
    if (!stagedFiles) {
      console.log(chalk.yellow('‚ö†Ô∏è N√£o h√° altera√ß√µes staged para o commit.'));
      process.exit(0);
    }
  } catch (error) {
    console.error(chalk.red('‚ùå Erro ao verificar altera√ß√µes staged:'), error);
    process.exit(1);
  }

  // Obt√©m o diff completo das altera√ß√µes staged, ignorando arquivos .lock
  let diff: string;
  try {
    diff = execSync(
      'git diff --cached -- . ":(exclude)*.lock"',
      { encoding: 'utf8' }
    );
  } catch (error) {
    console.error(chalk.red('‚ùå Erro ao obter o diff:'), error);
    process.exit(1);
  }

  // Divide o diff em chunks com base no n√∫mero m√°ximo de tokens.
  const MAX_TOKENS = 1000;
  const chunks = chunkDiff(diff, MAX_TOKENS);
  let inputForCommit: string;

  if (chunks.length === 1) {
    inputForCommit = chunks[0];
  } else {
    // Se houver v√°rios chunks, gera um resumo para todos eles utilizando um √∫nico spinner.
    const partialSummaries: string[] = [];
    const chunkSummaryPrefix =
      "A partir do diff abaixo, extraia um resumo breve das altera√ß√µes (use linguagem imperativa e em portugu√™s):";
    
    // Inicia um spinner √∫nico para todo o processo
    const spinnerSummary = ora("Gerando resumo do commit.").start();

    try {
      for (const chunk of chunks) {
        const prompt = `${chunkSummaryPrefix}\n\n${chunk}`;
        const summary = await callOpenAI(prompt, 'resumo');
        partialSummaries.push(summary);
      }
      spinnerSummary.succeed("Resumo do commit gerado.");
    } catch (error) {
      spinnerSummary.fail("Erro ao gerar resumo do commit.");
      console.error(chalk.red('‚ùå Erro ao gerar resumo para o commit:'), error);
      process.exit(1);
    }
    inputForCommit = partialSummaries.join("\n\n");
  }

  // Gera a mensagem de commit com o pr√©-prompt e o diff (ou seus resumos).
  const finalPrompt = `${COMMIT_PROMPT}\n\nDiff:\n\n${inputForCommit}`;
  const spinnerCommit = ora('Gerando mensagem de commit com base no diff...').start();

  let generatedMessage: string;
  try {
    generatedMessage = await callOpenAI(finalPrompt, 'commit');
    // Remove os delimitadores de bloco de c√≥digo (```)
    generatedMessage = generatedMessage.replace(/```/g, '').trim();
    spinnerCommit.succeed('Mensagem de commit gerada com sucesso.');
  } catch (error) {
    spinnerCommit.fail('Erro ao gerar a mensagem de commit.');
    console.error(chalk.red('‚ùå Erro ao gerar a mensagem de commit:'), error);
    process.exit(1);
  }

  console.log(chalk.greenBright('\n‚ú® Mensagem de commit gerada automaticamente:'));
  console.log(chalk.yellowBright(generatedMessage));

  // Pergunta ao usu√°rio se deseja confirmar, editar ou cancelar o commit.
  const promptModule = inquirer.createPromptModule();
  const { action } = await promptModule<{ action: 'confirm' | 'edit' | 'cancel' }>([
    {
      type: 'list',
      name: 'action',
      message: chalk.blue.bold('O que deseja fazer com a mensagem de commit gerada?'),
      choices: [
        { name: 'üìå Confirmar e commitar', value: 'confirm' },
        { name: 'üìù Editar a mensagem antes de commitar', value: 'edit' },
        { name: 'üö´ Cancelar o commit', value: 'cancel' },
      ],
    },
  ]);

  // Cria um arquivo tempor√°rio para armazenar a mensagem (para edi√ß√£o se necess√°rio).
  const tempFilePath = path.join(os.tmpdir(), 'COMMIT_EDITMSG');
  fs.writeFileSync(tempFilePath, generatedMessage);

  if (action === 'edit') {
    console.log(chalk.cyan('üìù Abrindo editor para edi√ß√£o da mensagem...'));
    const editor = process.env.EDITOR || 'nano';
    try {
      execSync(`${editor} ${tempFilePath}`, { stdio: 'inherit' });
    } catch (error) {
      console.error(chalk.red('‚ùå Erro ao abrir o editor:'), error);
      process.exit(1);
    }
  } else if (action === 'cancel') {
    console.log(chalk.yellow('üö´ Commit cancelado pelo usu√°rio.'));
    fs.unlinkSync(tempFilePath);
    process.exit(0);
  }

  // L√™ a mensagem final (ap√≥s eventual edi√ß√£o).
  const finalMessage = fs.readFileSync(tempFilePath, 'utf8').trim();
  if (!finalMessage) {
    console.error(chalk.red('‚ùå Nenhuma mensagem inserida, commit cancelado.'));
    fs.unlinkSync(tempFilePath);
    process.exit(1);
  }

  // Captura quaisquer argumentos adicionais passados para o comando.
  const gitArgs = process.argv.slice(2).join(' ');
  console.log(chalk.blue('üîç Argumentos adicionais para o commit:'), gitArgs);

  // Realiza o commit com a mensagem final.
  try {
    execSync(`git commit -F ${tempFilePath} ${gitArgs}`, { stdio: 'inherit' });
    console.log(chalk.green.bold('‚úÖ Commit realizado com sucesso.'));
  } catch (error) {
    console.error(chalk.red('‚ùå Erro ao realizar o commit:'), error);
  } finally {
    fs.unlinkSync(tempFilePath);
  }
}

main().catch((err) => {
  console.error(chalk.red('‚ùå Erro durante o commit:'), err);
  process.exit(1);
});
