// Importar polyfill antes de qualquer outra coisa
import '../src/utils/polyfill';

import { describe, it, expect } from 'bun:test';

describe('Git Functions - Escape de Caracteres Especiais', () => {
  describe('Fun√ß√£o escapeShellArg', () => {
    // Simular a fun√ß√£o de escape do arquivo git/index.ts
    function escapeShellArg(arg: string): string {
      return `'${arg.replace(/'/g, "'\"'\"'")}'`;
    }

    it('deve escapar aspas simples corretamente', () => {
      const message = "feat: adicionar valida√ß√£o no m√©todo 'EntregaService'";
      const escaped = escapeShellArg(message);
      const expected = `'feat: adicionar valida√ß√£o no m√©todo '"'"'EntregaService'"'"''`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com aspas duplas sem escape especial', () => {
      const message = 'feat: adicionar fun√ß√£o "isPermitido" para valida√ß√£o';
      const escaped = escapeShellArg(message);
      const expected = `'feat: adicionar fun√ß√£o "isPermitido" para valida√ß√£o'`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com caracteres especiais do shell (backticks, cifr√£o, backslash)', () => {
      const message =
        'feat: adicionar comando `git status` e vari√°vel $PATH com escape \\';
      const escaped = escapeShellArg(message);
      const expected = `'feat: adicionar comando \`git status\` e vari√°vel $PATH com escape \\'`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com quebras de linha', () => {
      const message = 'feat: adicionar fun√ß√£o\ncom quebra de linha';
      const escaped = escapeShellArg(message);
      const expected = `'feat: adicionar fun√ß√£o\ncom quebra de linha'`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com caracteres Unicode', () => {
      const message =
        'feat: adicionar suporte √† acentua√ß√£o (√ß√£o, √£, √©, √≠, √≥, √∫)';
      const escaped = escapeShellArg(message);
      const expected = `'feat: adicionar suporte √† acentua√ß√£o (√ß√£o, √£, √©, √≠, √≥, √∫)'`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com emojis', () => {
      const message = 'feat: ‚ú® adicionar nova funcionalidade üöÄ';
      const escaped = escapeShellArg(message);
      const expected = `'feat: ‚ú® adicionar nova funcionalidade üöÄ'`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com par√™nteses e colchetes', () => {
      const message = 'feat(auth): adicionar valida√ß√£o [importante] (urgente)';
      const escaped = escapeShellArg(message);
      const expected = `'feat(auth): adicionar valida√ß√£o [importante] (urgente)'`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com mensagem vazia', () => {
      const message = '';
      const escaped = escapeShellArg(message);
      const expected = `''`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com apenas espa√ßos', () => {
      const message = '   ';
      const escaped = escapeShellArg(message);
      const expected = `'   '`;

      expect(escaped).toBe(expected);
    });

    it('deve lidar com m√∫ltiplas aspas simples consecutivas', () => {
      const message = "feat: adicionar parsing de '''valor vazio'''";
      const escaped = escapeShellArg(message);
      const expected = `'feat: adicionar parsing de '"'"''"'"''"'"'valor vazio'"'"''"'"''"'"''`;

      expect(escaped).toBe(expected);
    });
  });

  describe('Constru√ß√£o de comandos git commit com nova abordagem', () => {
    function escapeShellArg(arg: string): string {
      return `'${arg.replace(/'/g, "'\"'\"'")}'`;
    }

    it('deve construir comando git commit seguro com aspas duplas', () => {
      const message = 'feat: adicionar fun√ß√£o "isValid" no service';
      const escapedMessage = escapeShellArg(message);
      const expectedCommand = `git commit -m 'feat: adicionar fun√ß√£o "isValid" no service'`;

      const actualCommand = `git commit -m ${escapedMessage}`;
      expect(actualCommand).toBe(expectedCommand);
    });

    it('deve construir comando git commit seguro com aspas simples', () => {
      const message = "feat: adicionar valida√ß√£o no m√©todo 'EntregaService'";
      const escapedMessage = escapeShellArg(message);
      const expectedCommand = `git commit -m 'feat: adicionar valida√ß√£o no m√©todo '"'"'EntregaService'"'"''`;

      const actualCommand = `git commit -m ${escapedMessage}`;
      expect(actualCommand).toBe(expectedCommand);
    });

    it('deve construir comando git commit seguro com caracteres especiais', () => {
      const message = 'feat: adicionar comando `git status` e vari√°vel $PATH';
      const escapedMessage = escapeShellArg(message);
      const expectedCommand = `git commit -m 'feat: adicionar comando \`git status\` e vari√°vel $PATH'`;

      const actualCommand = `git commit -m ${escapedMessage}`;
      expect(actualCommand).toBe(expectedCommand);
    });

    it('deve construir comando git commit para arquivo espec√≠fico', () => {
      const filename = 'src/test file.ts';
      const message = 'feat: adicionar fun√ß√£o "test" com caracteres $especiais';
      const escapedFilename = escapeShellArg(filename);
      const escapedMessage = escapeShellArg(message);
      const expectedCommand = `git commit 'src/test file.ts' -m 'feat: adicionar fun√ß√£o "test" com caracteres $especiais'`;

      const actualCommand = `git commit ${escapedFilename} -m ${escapedMessage}`;
      expect(actualCommand).toBe(expectedCommand);
    });

    it('deve ser mais seguro que a abordagem anterior com aspas duplas', () => {
      const problematicMessage =
        'feat: adicionar fun√ß√£o com `backticks` e $variavel e "aspas"';

      // Abordagem antiga (problem√°tica)
      const oldEscape = `"${problematicMessage.replace(/"/g, '\\"')}"`;

      // Nova abordagem (segura)
      const newEscape = escapeShellArg(problematicMessage);

      // A nova abordagem deve encapsular tudo em aspas simples
      expect(newEscape).toBe(
        `'feat: adicionar fun√ß√£o com \`backticks\` e $variavel e "aspas"'`
      );

      // A abordagem antiga teria problemas com backticks e vari√°veis
      const expectedOld =
        '"feat: adicionar fun√ß√£o com `backticks` e $variavel e ' +
        String.fromCharCode(92) +
        String.fromCharCode(34) + 'aspas' +
        String.fromCharCode(92) +
        String.fromCharCode(34) +
        '"';
      expect(oldEscape).toBe(expectedOld);
    });
  });

  describe('Casos de teste espec√≠ficos do bug reportado', () => {
    function escapeShellArg(arg: string): string {
      return `'${arg.replace(/'/g, "'\"'\"'")}'`;
    }

    it('deve lidar com mensagens que causavam diverg√™ncia entre terminal e commit', () => {
      const testCases = [
        'feat: adicionar fun√ß√£o "ValidarTratamentoEntregaService"',
        'fix: corrigir m√©todo `getUser` com valida√ß√£o $userId',
        "refactor: melhorar 'performance' do sistema",
        'feat: implementar autentica√ß√£o com token JWT e valida√ß√£o \\escape',
        'docs: atualizar README.md com se√ß√£o de "Instala√ß√£o"',
      ];

      testCases.forEach((message) => {
        const escaped = escapeShellArg(message);

        // Verificar que n√£o h√° caracteres problem√°ticos expostos
        expect(escaped.startsWith("'")).toBe(true);
        expect(escaped.endsWith("'")).toBe(true);

        // Verificar que o comando seria v√°lido e seguro
        const command = `git commit -m ${escaped}`;
        expect(command).toContain("git commit -m '");
        expect(escaped.startsWith("'")).toBe(true);
        expect(escaped.endsWith("'")).toBe(true);
        // Com aspas simples, backticks e vari√°veis s√£o seguros pois n√£o s√£o interpretados pelo shell
      });
    });

    it('deve preservar a mensagem original quando executada', () => {
      const originalMessage =
        'feat: adicionar fun√ß√£o "isValid" com suporte √† $variavel e `comando`';
      const escaped = escapeShellArg(originalMessage);

      // Simular o que o shell faria: extrair o conte√∫do entre aspas simples
      const extractedMessage = escaped.slice(1, -1).replace(/'"'"'/g, "'");

      expect(extractedMessage).toBe(originalMessage);
    });
  });
});
