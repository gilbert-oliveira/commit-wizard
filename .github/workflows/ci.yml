name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Testes e Qualidade
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache depend√™ncias
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Instalar depend√™ncias
        run: npm ci
      - name: Verificar tipos TypeScript
        run: npm run typecheck || npx tsc --noEmit
      - name: Executar testes unit√°rios
        run: npm test
      - name: Executar testes com cobertura
        run: npm run test:coverage
      - name: Executar testes de integra√ß√£o
        if: matrix.node-version == '20.x'
        run: |
          git config --global user.name "CI Bot"
          git config --global user.email "ci@example.com"
          npm run test:integration
      - name: Build do projeto
        run: npm run build
      - name: Verificar build
        run: |
          if [ -f "dist/commit-wizard.js" ]; then
            echo "‚úÖ Build gerado com sucesso"
            ls -la dist/
            chmod +x dist/commit-wizard.js
            timeout 10s node dist/commit-wizard.js --help || true
          else
            echo "‚ùå Build falhou"
            exit 1
          fi
        shell: bash
  compatibility:
    name: Teste de Compatibilidade
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [18, 20, 22]
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          - os: windows-latest
            node-version: 18
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Instalar depend√™ncias
        run: npm ci
      - name: Executar testes b√°sicos
        run: npm test
      - name: Testar build
        run: |
          npm run build
          if [ -f "dist/commit-wizard.js" ]; then
            echo "‚úÖ Build bem-sucedido no ${{ matrix.os }} com Node.js ${{ matrix.node-version }}"
          else
            echo "‚ùå Build falhou"
            exit 1
          fi
        shell: bash
  performance:
    name: Testes de Performance
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Instalar depend√™ncias
        run: npm ci
      - name: Medir tempo de build
        run: |
          echo "‚ö° Medindo performance do build..."
          start_time=$(date +%s)
          npm run build
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "üïê Tempo de build: ${build_time} segundos"
          if [ $build_time -gt 30 ]; then
            echo "‚ö†Ô∏è  Build est√° lento (${build_time}s > 30s)"
            exit 1
          else
            echo "‚úÖ Build est√° dentro do limite aceit√°vel"
          fi
        shell: bash
      - name: Medir tempo de testes
        run: |
          echo "üß™ Medindo performance dos testes..."
          start_time=$(date +%s)
          npm test
          end_time=$(date +%s)
          test_time=$((end_time - start_time))
          echo "üïê Tempo de testes: ${test_time} segundos"
          if [ $test_time -gt 60 ]; then
            echo "‚ö†Ô∏è  Testes est√£o lentos (${test_time}s > 60s)"
            exit 1
          else
            echo "‚úÖ Testes est√£o dentro do limite aceit√°vel"
          fi
        shell: bash
      - name: Verificar tamanho do bundle
        run: |
          echo "üì¶ Tamanho do bundle gerado:"
          ls -lh dist/
          bundle_size=$(stat -c%s "dist/commit-wizard.js")
          echo "üìä Tamanho: ${bundle_size} bytes"
          if [ $bundle_size -gt 5242880 ]; then
            echo "‚ö†Ô∏è  Bundle muito grande (${bundle_size} bytes > 5MB)"
            exit 1
          else
            echo "‚úÖ Tamanho do bundle est√° aceit√°vel"
          fi
        shell: bash
